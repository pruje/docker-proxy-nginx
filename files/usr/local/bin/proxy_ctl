#!/bin/bash
#
#  Proxy controller
#

#
#  Functions
#

# Print command result
result() {
	local res=$?
	[ -n "$1" ] && res=$1

	if [ $res = 0 ] ; then
		echo "... ok"
	else
		echo "... FAILED (exit code: $res)"
	fi

	return $res
}


# Get a config value from a nginx config file
# Usage: get_config FILE PARAMETER
get_config() {
	grep -E "^\s*$2\s+" "$1" | tail -n 1 | sed "s/^.*$2\s+//; s/;$//"
}


# Test nginx config
ctl_test() {
	local output res quiet=false

	[ "$1" = "-q" ] && quiet=true

	$quiet || echo "Test config..."

	output=$(nginx -t 2>&1)
	res=$?

	[ $res = 0 ] && result $res

	echo "$output" | grep 'host not found in upstream' && res=2

	# print unreachable configs
	if ! $quiet ; then
		for f in /etc/nginx/conf.d/*.unreachable ; do
			[ -f "$f" ] && echo "[INFO] disabled config file: $f"
		done
	fi

	echo "$output"
	return $res
}


# Reload nginx config
ctl_reload() {
	echo "Reload nginx..."
	nginx -s reload
	result
}


#
#  Commands
#

# Initialize nginx
# Not to be documented, this command is only used by the entrypoint
cmd_init() {
	local output dest

	echo "Test config..."

	# try to reactivate unreachable configs
	for f in /etc/nginx/conf.d/*.unreachable ; do
		[ -f "$f" ] || continue

		dest=${f:0:-12}
		if [ -f "$dest" ] ; then
			echo "[WARNING] cannot activate $f config: $dest exists!"
		else
			mv "$f" "$dest"
		fi
	done

	while true ; do
		output=$(ctl_test -q)
		case $? in
			0)
				break
				;;
			2)
				# for each upstream not reachable,
				for f in $(echo "$output" | grep 'host not found in upstream' | grep -o '/etc/nginx/conf.d/.*' | sed 's/.conf:.*/.conf/g' | sort -u) ; do
					# rename config file
					echo "[WARNING] config file disabled: $f (host unreachable)"
					mv "$f" "$f".unreachable
				done
				;;
			*)
				# fatal error
				echo "$output"
				return 1
				;;
		esac
	done

	return 0
}


# Test proxy config
cmd_test() {
	ctl_test
}


# Reload proxy config
cmd_reload() {
	ctl_test && ctl_reload
}


# Put a config file in maintenance mode
# Usage: maintenance FILE
cmd_maintenance() {

	# usage error
	if [ -z "$1" ] ; then
		echo "Usage: proxy_ctl maintenance FILE"
		return 1
	fi

	cd /etc/nginx/conf.d || return 1

	local conf=$(basename "$1")
	if ! [ -f "$conf" ] ; then
		echo "File not found: $conf"
		return 1
	fi

	local renamed=.$conf.maintenance
	if [ -f "$renamed" ] ; then
		echo "already in maintenance"
		return 0
	fi

	if ! mv "$conf" "$renamed" ; then
		error "Failed to disable config file: $conf"
		return 1
	fi

	local ssl_certificate=$(get_config "$renamed" ssl_certificate)
	local ssl_certificate_key=$(get_config "$renamed" ssl_certificate_key)

	# no ssl config
	if [ -z "$ssl_certificate" ] || [ -z "$ssl_certificate_key" ] ; then
		# create empty config
		touch "$conf"
		cmd_reload
		return 0
	fi

	cp /etc/nginx/maintenance.conf "$conf" && \
	sed -i "s|ssl_certificate .*|ssl_certificate $ssl_certificate;|; s|ssl_certificate_key .*|ssl_certificate_key $ssl_certificate_key;|" "$conf" && \
	cmd_reload
}


# Get a config file out of maintenance mode
# Usage: online FILE
cmd_online() {

	# usage error
	if [ -z "$1" ] ; then
		echo "Usage: proxy_ctl online FILE"
		return 1
	fi

	cd /etc/nginx/conf.d || return 1

	local conf=$(basename "$1")
	if ! [ -f "$conf" ] ; then
		echo "File not found: $conf"
		return 1
	fi

	local renamed=.$conf.maintenance
	if ! [ -f "$renamed" ] ; then
		echo "already online"
		return 0
	fi

	# restore config
	if ! mv "$renamed" "$conf" ; then
		error "Failed to enable config file: $conf"
		return 1
	fi

	cmd_reload
}


#
#  Main program
#

# check command
case $1 in
	init|test|reload|maintenance|online)
		cmd=$1
		;;
	*)
		echo "Unknown command: $1"
		echo "Use proxy_ctl help to see available commands"
		exit 1
		;;
esac
shift

# run command
cmd_$cmd "$@"
exit $?
